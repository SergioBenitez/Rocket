###############################################################################
# Release info: displayed between bars in the header
###############################################################################

[release]
version = "0.5.0-dev"
date = "Oct 21, 2020"

###############################################################################
# Top features: displayed in the header under the introductory text.
###############################################################################

[[top_features]]
title = "Tip Güvenli"
text = "Rocket, istek ve yanıtların veri türlerinin doğruluğunu garantiler."
image = "helmet"
button = "Daha Fazlasını Öğrenin"
url = "overview/#how-rocket-works"

[[top_features]]
title = "Basmakalıpsız"
text = "Zamanınızı gerçekten önemli kodu yazmakla geçirin ve müsaade edin, Rocket geriye kalanı halletsin."
image = "robot-free"
button = "Örnekleri Bakın"
url = "overview/#anatomy-of-a-rocket-application"

[[top_features]]
title = "Kullanımı Kolay"
text = "Basit, sezgisel API'ler için Rocket mükemmel bir tercihtir."
image = "sun"
button = "Kullanmaya Başlayın"
url = "guide"
margin = 2

[[top_features]]
title = "Esnek"
text = "Herhangi bir Rocket uygulamasının kullanabileceği size özgü birinci sınıf ilkel (primitif) veri türlerinizi oluşturun."
image = "telescope"
button = "Nasıl Olduğunu Görün"
url = "overview/#anatomy-of-a-rocket-application"
margin = 9

###############################################################################
# Sections: make sure there are an odd number so colors work out.
###############################################################################

[[sections]]
title = "Merhaba, Rocket!"
code = '''
  #[macro_use] extern crate rocket;

  #[get("/merhaba/<isim>/<yas>")]
  fn merhaba(isim: String, yas: u8) -> String {
      format!("Merhaba, {} yaşındaki {}!", yas, isim)
  }

  #[launch]
  fn rocket() -> rocket::Rocket {
      rocket::ignite().mount("/", routes![merhaba])
  }
'''
text = '''
	Bu bir **tamamlanmış Rocket uygulaması**dır. Tam olarak düşündüğünüz şeyi yapar.
	Eğer **http://localhost:8000/merhaba/Mehmet/18** adresini ziyaret ederseniz şunu
	görürdünüz:

  <span class="callout">Merhaba, 18 yaşındaki Mehmet!</span>

	Eğer bu adresteki `<yas>` parametresine `u8` tipinde bir veri girilmezse,
	Rocket körü körüne `merhaba`'yı çağırmaz. Onun yerine, uygun bir rota bulmaya
	çalışır, bulamazsa bir **404** gönderir.
'''

[[sections]]
title = "Formlar? Kontrol!"
code = '''
  #[derive(FromForm)]
  struct Gorev {
     aciklama: String,
     tamamlandi: bool
  }

  #[post("/", data = "<gorev>")]
  fn yeni(gorev: Form<Task>) -> Flash<Redirect> {
      if gorev.aciklama.is_empty() {
          Flash::error(Redirect::to("/"), "Boş bırakılamaz.")
      } else {
          Flash::success(Redirect::to("/"), "Görev eklendi.")
      }
  }
'''
text = '''
	Formları işlemek (form handling), **basit ve kolay**. Basitçe veri türünüzü
	`FromForm`'dan türetin ve bırakın Rocket hangi parametreyi kullanacağını bulsun,
	bilsin. Rocket, form isteğinizi **dönüştürür ve doğrular**, uygun yapıyı oluşturur,
	fonksiyonunuzu çağırır.

	Uygunsuz form istekleri? Rocket fonksiyonunuzu çağırmaz! Ya formun isteğinizin
	uygunsuz olduğunu bilmek isterseniz? Oldukça basit! `task` veri türünü `Option`
	ya da `Result` olarak değiştirin.
'''

[[sections]]
title = "JSON, out of the box."
code = '''
  #[derive(Serialize, Deserialize)]
  struct Mesaj {
     icerik: String,
  }

  #[put("/<id>", data = "<msj>")]
  fn guncelle(db: &Db, id: Id, msj: Json<Mesaj>) -> JsonValue {
      if db.contains_key(&id) {
          db.insert(id, &msj.icerik);
          json!({ "durum": "hazır" })
      } else {
          json!({ "durum": "hata" })
      }
  }
'''
text = '''
  Rocket has first-class support for JSON, right out of the box. Simply derive
  `Deserialize` or `Serialize` to receive or return JSON, respectively.

  Like other important features, JSON works through Rocket’s `FromData` trait,
  Rocket’s approach to deriving types from body data. It works like this:
  specify a `data` route parameter of any type that implements `FromData`. A
  value of that type will then be created automatically from the incoming
  request body. Best of all, you can implement `FromData` for your types!
'''

###############################################################################
# Buttom features: displayed above the footer.
###############################################################################

[[bottom_features]]
title = 'Templating'
text = "Rocket makes templating a breeze with built-in templating support."
image = 'templating-icon'
url = 'guide/responses/#templates'
button = 'Learn More'
color = 'blue'

[[bottom_features]]
title = 'Cookies'
text = "View, add, or remove cookies, with or without encryption, without hassle."
image = 'cookies-icon'
url = 'guide/requests/#cookies'
button = 'Learn More'
color = 'purple'
margin = -6

[[bottom_features]]
title = 'Streams'
text = "Rocket streams all incoming and outgoing data, so size isn't a concern."
image = 'streams-icon'
url = 'guide/requests/#streaming'
button = 'Learn More'
color = 'red'
margin = -29

[[bottom_features]]
title = 'Config Environments'
text = "Configure your application your way for development, staging, and production."
image = 'config-icon'
url = 'guide/configuration/#environment'
button = 'Learn More'
color = 'yellow'
margin = -3

[[bottom_features]]
title = 'Testing Library'
text = "Unit test your applications with ease using the built-in testing library."
image = 'testing-icon'
url = 'guide/testing#testing'
button = 'Learn More'
color = 'orange'

[[bottom_features]]
title = 'Typed URIs'
text = "Rocket typechecks route URIs for you so you never mistype a URI again."
image = 'ship-icon'
url = 'guide/responses/#typed-uris'
button = 'Learn More'
color = 'green'
margin = -20

# [[bottom_features]]
# title = 'Query Strings'
# text = "Handling query strings and parameters is type-safe and easy in Rocket."
# image = 'query-icon'
# url = 'guide/requests/#query-strings'
# button = 'Learn More'
# color = 'red'
# margin = -3

# [[bottom_features]]
# title = 'Private Cookies'
# text = "Safe, secure, private cookies are built-in so your users can stay safe."
# image = 'sessions-icon'
# url = 'guide/requests/#private-cookies'
# button = 'Learn More'
# color = 'purple'
